// Generated by RcppR6 (0.2.4): do not edit by hand
#include <RcppQueues.h>

// [[Rcpp::export]]
RcppQueues::Uniform uniform__ctor(double min, double max) {
  return RcppQueues::Uniform(min, max);
}
// [[Rcpp::export]]
Rcpp::NumericVector uniform__draw(RcppQueues::RcppR6::RcppR6<RcppQueues::Uniform> obj_, int n) {
  return obj_->draw(n);
}
// [[Rcpp::export]]
double uniform__range(RcppQueues::RcppR6::RcppR6<RcppQueues::Uniform> obj_) {
  return RcppQueues::uniform_range(*obj_);
}
// [[Rcpp::export]]
double uniform__min__get(RcppQueues::RcppR6::RcppR6<RcppQueues::Uniform> obj_) {
  return obj_->min;
}

// [[Rcpp::export]]
double uniform__max__get(RcppQueues::RcppR6::RcppR6<RcppQueues::Uniform> obj_) {
  return obj_->max;
}

// [[Rcpp::export]]
double uniform__the_min__get(RcppQueues::RcppR6::RcppR6<RcppQueues::Uniform> obj_) {
  return obj_->get_min();
}
// [[Rcpp::export]]
void uniform__the_min__set(RcppQueues::RcppR6::RcppR6<RcppQueues::Uniform> obj_, double value) {
  obj_->set_min(value);
}

// [[Rcpp::export]]
double uniform__the_max__get(RcppQueues::RcppR6::RcppR6<RcppQueues::Uniform> obj_) {
  return RcppQueues::uniform_get_max(*obj_);
}
// [[Rcpp::export]]
void uniform__the_max__set(RcppQueues::RcppR6::RcppR6<RcppQueues::Uniform> obj_, double value) {
  RcppQueues::uniform_set_max(*obj_, value);
}

// [[Rcpp::export]]
Rcpp::NumericVector uniform__u__get(RcppQueues::RcppR6::RcppR6<RcppQueues::Uniform> obj_) {
  return RcppQueues::draw1(*obj_);
}


// [[Rcpp::export]]
RcppQueues::stack stack__ctor() {
  return RcppQueues::stack();
}
// [[Rcpp::export]]
void stack__pop(RcppQueues::RcppR6::RcppR6<RcppQueues::stack> obj_) {
  RcppQueues::pop(*obj_);
}
// [[Rcpp::export]]
void stack__push(RcppQueues::RcppR6::RcppR6<RcppQueues::stack> obj_, int x) {
  obj_->push(x);
}
// [[Rcpp::export]]
bool stack__equals(RcppQueues::RcppR6::RcppR6<RcppQueues::stack> obj_, RcppQueues::stack other) {
  return RcppQueues::stack_eq(*obj_, other);
}
// [[Rcpp::export]]
bool stack__differs(RcppQueues::RcppR6::RcppR6<RcppQueues::stack> obj_, RcppQueues::stack other) {
  return operator!=(*obj_, other);
}
// [[Rcpp::export]]
bool stack__empty__get(RcppQueues::RcppR6::RcppR6<RcppQueues::stack> obj_) {
  return obj_->empty();
}

// [[Rcpp::export]]
size_t stack__size__get(RcppQueues::RcppR6::RcppR6<RcppQueues::stack> obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
int stack__top__get(RcppQueues::RcppR6::RcppR6<RcppQueues::stack> obj_) {
  return RcppQueues::top(*obj_);
}


// [[Rcpp::export]]
RcppQueues::empty empty__ctor() {
  return RcppQueues::empty();
}

// [[Rcpp::export]]
RcppQueues::HumanEventQ HumanEventQ__ctor(int initQ) {
  return RcppQueues::HumanEventQ(initQ);
}
// [[Rcpp::export]]
void HumanEventQ__push_Event(RcppQueues::RcppR6::RcppR6<RcppQueues::HumanEventQ> obj_, int Event) {
  obj_->push_Event(Event);
}
// [[Rcpp::export]]
void HumanEventQ__front_Event(RcppQueues::RcppR6::RcppR6<RcppQueues::HumanEventQ> obj_) {
  obj_->front_Event();
}
// [[Rcpp::export]]
void HumanEventQ__push_eventReal(RcppQueues::RcppR6::RcppR6<RcppQueues::HumanEventQ> obj_, double tEvent, Rcpp::RObject PAR, char tag) {
  obj_->push_eventReal(tEvent, PAR, tag);
}


